// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: resourceService/resourceService.proto

package tuzov_sso_v1_resourceService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Resource_AccessResource_FullMethodName   = "/resource.Resource/AccessResource"
	Resource_LogAccessAttempt_FullMethodName = "/resource.Resource/LogAccessAttempt"
)

// ResourceClient is the client API for Resource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceClient interface {
	AccessResource(ctx context.Context, in *AccessResourceRequest, opts ...grpc.CallOption) (*AccessResourceResponse, error)
	LogAccessAttempt(ctx context.Context, in *LogAccessAttemptRequest, opts ...grpc.CallOption) (*LogAccessAttemptResponse, error)
}

type resourceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceClient(cc grpc.ClientConnInterface) ResourceClient {
	return &resourceClient{cc}
}

func (c *resourceClient) AccessResource(ctx context.Context, in *AccessResourceRequest, opts ...grpc.CallOption) (*AccessResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessResourceResponse)
	err := c.cc.Invoke(ctx, Resource_AccessResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) LogAccessAttempt(ctx context.Context, in *LogAccessAttemptRequest, opts ...grpc.CallOption) (*LogAccessAttemptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogAccessAttemptResponse)
	err := c.cc.Invoke(ctx, Resource_LogAccessAttempt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceServer is the server API for Resource service.
// All implementations must embed UnimplementedResourceServer
// for forward compatibility.
type ResourceServer interface {
	AccessResource(context.Context, *AccessResourceRequest) (*AccessResourceResponse, error)
	LogAccessAttempt(context.Context, *LogAccessAttemptRequest) (*LogAccessAttemptResponse, error)
	mustEmbedUnimplementedResourceServer()
}

// UnimplementedResourceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedResourceServer struct{}

func (UnimplementedResourceServer) AccessResource(context.Context, *AccessResourceRequest) (*AccessResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessResource not implemented")
}
func (UnimplementedResourceServer) LogAccessAttempt(context.Context, *LogAccessAttemptRequest) (*LogAccessAttemptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogAccessAttempt not implemented")
}
func (UnimplementedResourceServer) mustEmbedUnimplementedResourceServer() {}
func (UnimplementedResourceServer) testEmbeddedByValue()                  {}

// UnsafeResourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceServer will
// result in compilation errors.
type UnsafeResourceServer interface {
	mustEmbedUnimplementedResourceServer()
}

func RegisterResourceServer(s grpc.ServiceRegistrar, srv ResourceServer) {
	// If the following call pancis, it indicates UnimplementedResourceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Resource_ServiceDesc, srv)
}

func _Resource_AccessResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).AccessResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resource_AccessResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).AccessResource(ctx, req.(*AccessResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_LogAccessAttempt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogAccessAttemptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).LogAccessAttempt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resource_LogAccessAttempt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).LogAccessAttempt(ctx, req.(*LogAccessAttemptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Resource_ServiceDesc is the grpc.ServiceDesc for Resource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Resource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resource.Resource",
	HandlerType: (*ResourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccessResource",
			Handler:    _Resource_AccessResource_Handler,
		},
		{
			MethodName: "LogAccessAttempt",
			Handler:    _Resource_LogAccessAttempt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resourceService/resourceService.proto",
}
